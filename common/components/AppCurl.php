<?php
/**
 * @desc AppCurl交互类 增加跟业务相关的信息：获取数据方式，debug,login,cookie等
 *          单例调用：Yii::$app->http
 * @author zouah
 */
namespace common\components;

use Yii;
use common\helpers\PageHelp;
use common\helpers\UrlHelp;
use common\helpers\TTHelp;

class AppCurl extends Curl
{
    /** @var array 用于请求信息打印 */
    protected $_debug = array();
    /** @var $_cookie string 请求的cookie */
    protected $_cookie = '';
    /** @var $_isLogin boolean 接口是否需要登录（带loginToken） */
    protected $_isLogin = false;
    /** @var bool 是否通过cache获取数据 */
    protected $_cache = false;


    /**
     * Total reset of options, responses, etc.
     *
     * @return static
     */
    public function reset()
    {
        parent::reset();
        $this->_cookie = null;
        $this->_isLogin = false;
        $this->_cache =false;
        $this->_debug =array();
        return $this;
    }

    /**
     * @desc set cookie
     * @param $arr array
     *          [
     *              key1=>value1,
     *              key2=>value2
     *          ]
     * @return static
     */
    public function setCookie($arr)
    {
        if (isset($arr) && is_array($arr))
        {
            foreach ($arr as $key =>$val)
            {
                $this->_cookie .= $key . "=" . $val . ";";
            }
        }
        return $this;
    }

    /**
     * @desc get Cooke
     * @return  array 返回数组
     */
    public function getCookie()
    {
        if(empty($this->_cookie))
        {
            return false;
        }
        $tmp = explode(';',$this->_cookie);
        $arr = [];
        foreach($tmp as $v)
        {
            list($key,$value) = explode('=',$v);
            $arr[$key] = $value;
        }
        return $arr;
    }

    /**
     * @desc 设置登陆token
     * @return static
     */
    public function setToken()
    {
        $this->_isLogin = true;
        return $this->setHeader(['loginToken'=>TTHelp::getToken()]);
    }

    /**
     * @desc 亚马逊文件、图片上传
     * @param $url
     * @param array $data
     * @return mixed
     */
    public function amazonLoad($url,$data=array())
    {
        $this->reset();
        $this->setOption(CURLOPT_TIMEOUT, 30);
        $this->setOption(CURLOPT_CONNECTTIMEOUT, 30);
        $this->setOption(CURLOPT_SSL_VERIFYHOST, false);
        $this->setOption(CURLOPT_SSL_VERIFYPEER, false);
        $this->setOption(CURLOPT_RETURNTRANSFER, true);
        $this->_method = 'POST';
        $this->_api = 'amazonLoad';
        $this->_url = $url;
        $this->_data = $data;
        $this->setOption(CURLOPT_POST,true);
        $this->setOption(CURLOPT_POSTFIELDS,$this->_data);
        return $this;
    }

    /**
     * @return mixed
     * @throws \yii\base\Exception
     */
    protected function _httpRequest()
    {

        if(!empty($this->_cookie))
        {
            $this->setOption(CURLOPT_COOKIE,$this->_cookie);
        }

        return parent::_httpRequest(); // TODO: Change the autogenerated stub

    }

    /**
     * @desc 获取缓存
     * @param $params array
     *              key string 返回数据集中哪个字段下的数据 默认为data
     *              time int 秒  缓存时间
     * @return mixed
     */
    public function cache($params = null)
    {
        $this->_cache = true;
        $key = is_array($params) ? $params['key'] : $params;
        $params = (array)$params;
        $params['key'] = !empty($key) ? $key : 'data';
        $this->setDebug();
        $cacheKey = Yii::$app->params['cacheKey']['curl'].md5(serialize($this->_debug));
        $res = Yii::$app->cache->get($cacheKey);
        if($res === false)
        {
            $this->_cache = false;
            $res = $this->data($params);
            $res_original = json_decode($this->_response,true);
            if ($res_original['ret'] == 1)
            {
                $time = $params['time'] > 0 ? intval($params['time']) : Yii::$app->params['time']['curlCache'];
                Yii::$app->cache->set($cacheKey, $res, $time);
            }
        }
        return $res;
    }

    /**
     * @desc 获取结果
     * @param $params array
     *              key string 返回数据集中哪个字段下的数据 默认为data
     * @return mixed
     */
    public function data($params = null)
    {
        $key = is_array($params) ? $params['key'] : $params;
        $key = !empty($key) ? $key : 'data';
        parent::data();
        if($this->_isLogin)
        {
            $this->_checkLogin();
        }
        $arr = ['key'=> $key,'data'=>$this->_response];
        $data = $this->_getDataByType($arr);
        if($key == 'all')
        {
            $this->_convertResErrorCode();
        }
        return $data;
    }

    /**
     * @desc 处理错误代码
     * @param $res
     * @return $res
     */
    protected function _convertResErrorCode()
    {
        $codes = Yii::$app->params['error-code'];
        $api = $this->_api;
        if(array_key_exists($api,$codes))
        {
            if(array_key_exists($this->_response['errCode'],$codes[$api]))
            {
                $msg = TTHelp::getSiteLang($codes[$api][$this->_response['errCode']]);
                if($msg != $codes[$api][$this->_response['errCode']])
                {
                    $this->_response['errMsg'] = $msg;
                }
            }
        }
    }

    /**
     * @desc 根据类型获取数据
     * @param $params array
     *          data 待处理的数据集
     *          key 返回数据集中哪个字段下的数据 默认为data
     * @return mixed
     */
    private function _getDataByType($params)
    {
        $res = is_array($params['data']) ? $params['data'] : json_decode($params['data'],true);
        $key = !empty($params['key']) ? $params['key'] : 'data';
        switch($key)
        {
            case 'all':
                return $res;
                break;
            case 'json':
                return $params['data'];
                break;
            case 'data':
                return $res['ret'] == 1 ? $res['data'] : null;
                break;
            default:
                return array_key_exists($key,$res['data']) ? $res['data'][$key] : null;
        }
    }

    /**
     * @desc 获取分页
     * @param $params array
     *                  pageKey 分页字段位于哪个位置 默认data
     *                  pageName string 分页字段名 默认page
     *                  totalKey string 总记录数字段名 默认total
     *                  pageSizeKey string pageSize字段名 默认pageSize
     *                  pageNumKey string pageNum字段名 默认pageNum
     * @return PageHelp
     */
    public function getPage($params)
    {
        $pageKey = !empty($params['pageKey']) ? $params['pageKey'] : 'data';
        $pageName = !empty($params['pageName']) ? $params['pageName'] : 'page';
        $res = json_decode($this->_response,true);
        $page = false;
        switch($pageKey)
        {
            case 'ret':
                $page = is_array($res[$pageName]) ? $res[$pageName] : false;
                break;
            case 'data':
                $page = is_array($res['data'][$pageName]) ? $res['data'][$pageName] : false;
                break;
            default:
                $page = is_array($res['data'][$pageKey][$pageName]) ? $res['data'][$pageKey][$pageName] : false;
        }
        if(!$page)
        {
            $page = is_array($res['page']) ? $res['data']['page'] : false;
        }
        $total = $params['totalKey'] ? $page[$params['totalKey']] : $page['total'];
        $pageSize = $params['pageSizeKey'] ? $page[$params['pageSizeKey']]  : $page['pageSize'];
        $pageNum = $params['pageNumKey'] ? $page[$params['pageNumKey']] :$page['pageNumKey'];
        return new PageHelp($total, $pageSize, $pageNum);
    }

    /**
     * @desc 判断接口是否需要登陆
     *
     */
    protected function _checkLogin()
    {
        $res = json_decode($this->_response,true);
        if($res['ret'] == 0 && $res['errCode'] == 'NOT_LOG' && $this->_api != 'UserSignInfo')
        {
            //记录日志,同一接口api在5分钟之内只报错一次
            $redisKey = Yii::$app->params['redisKey']['curlTokenError'] . $this->_api;
            $redisTime = Yii::$app->params['time']['curlErrorCache'];
            if(empty(Yii::$app->mysession->get($redisKey)))
            {
                Yii::error('CURL TOKEN ERROR,api:' . $this->_api);
                Yii::$app->mysession->set($redisKey,$this->_api,$redisTime);
            }

            if(!Yii::$app->request->isAjax)
            {
                header('Location:'.UrlHelp::to(['member/login']));
                exit;
            }
        }
    }

    /**
     * @desc debug
     * @param string $type
     * @return mixed
     */
    public function debug($type = 'print_r')
    {
        //debug时,执行data方法，不取接口数据
        if($this->_cache)
        {
            $this->data();
        }
        $this->setDebug();
        switch($type)
        {
            case 'return':
                return $this->_debug;
                break;
            case 'var_dump':
                var_dump($this->_debug);
                break;
            default:
                print_r($this->_debug);
        }
        return $this;
    }

    /**
     * @desc 设置debug数据
     */
    public function setDebug()
    {
        $this->_debug = array(
            'method'            => $this->_method,
            'api'               => $this->_api,
            'ip'               => $this->_ip,
            'url'               => $this->_url,
            'params'            => $this->_data,
            'cookie'            => $this->_cookie,
            'options'           => $this->_options,
            'defaultOptions'    => $this->_defaultOptions,
            'code'              => $this->_responseCode,
            'response'          => $this->_api == 'amazonLoad' ? $this->_response : json_decode($this->_response,true),
        );
    }

    /**
     * @desc 返回接口测试数据
     * @param array $params
     *              key string
     *              ret int 结果集中的ret的值，默认为1
     * @return mixed
     */
    public function test($params = null)
    {
        $key = is_array($params) ? $params['key'] : $params;
        $key = !empty($key) ? $key : 'data';
        if(in_array(YII_ENV,['dev','test']))
        {
            //debug时不执行data方法
            $this->_cache = false;

            //获取api key
            $apiUrlArr = parse_url($this->_url);
            $apiUrl = $apiUrlArr['scheme'] .'://'. $apiUrlArr['host'];
            $apiHostKey = array_search($apiUrl,Yii::$app->params['hosts']);

            //执行测试方法
            $test = Yii::createObject('common\apitest\\'.ucfirst($apiHostKey).'Test');
            $test->create($this);
            $this->_responseCode  = 'phpTestData';
            call_user_func([$test,$this->_api]);
            $ret = empty($params['ret']) ? 1 : $params['ret'];
            $this->_response  = $test->output($ret);
        }
        else
        {
            parent::data();
        }

        //登录检测
        if($this->_isLogin)
        {
            $this->_checkLogin();
        }

        //处理结果集
        $arr = ['key'=> $key,'data'=>$this->_response];
        $data = $this->_getDataByType($arr);

        //处理分页
        if($params['key'] != 'json' && !empty($params['pageKey']))
        {
            $data = ['data'=>$data,'page'=>$this->page(['pageKey' => $params['pageKey'],'pageName'=>$params['pageName']])];
        }
        return $data;
    }
}